---
- name: Setup VMs
  hosts: hypervisors
  vars:
    vm_template: "{{ 'templates/vm_template.xml.j2' if ansible_architecture == 'ppc64le' else 'templates/vm_template_amd64.xml.j2' }}"
  tasks:
    - name: Check if config directory exists
      stat:
       path: "{{ vm_config_path }}"
      register: vmconfig_dir

    - name: "Ansible Create directory if not exists"
      file:
       path: "{{ vm_config_path }}"
       state: directory
      when: vmconfig_dir.stat.exists == false

    - name: Get list of VMs
      virt: command=list_vms
      register: vm_list

    - name: Download VM image
      get_url:
        url: "{{ item.image_download_url }}"
        dest: "{{ image_path }}/{{ item.image_base_name }}"
      when: item.name not in vm_list.list_vms
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create VM image
      shell: |
        qemu-img create -f qcow2 -b "{{ image_path }}/{{ item.image_base_name }}" "{{ image_path }}/{{ item.disk }}" "{{ item.disk_size }}"
      when: item.name not in vm_list.list_vms
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create Config Drive Input
      template:
        src: templates/config.yaml.j2
        dest: "{{ vm_config_path }}/{{ item.name }}_config.yaml"
      when: item.name not in vm_list.list_vms
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create config drive iso
      shell: |
        cloud-localds "{{ image_path }}/{{ item.config_drive_iso }}" "{{ vm_config_path }}/{{ item.name }}_config.yaml"
      when: item.name not in vm_list.list_vms
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"

    # Defining a VM and making is autostart with host. VM will be off after this task
    - name: Define VM from xml and set autostart
      virt:
        command: define
        name: "{{ item.name }}"
        #xml: "{{ lookup('template', 'templates/vm_template.xml.j2') }}"
        xml: "{{ lookup('template', vm_template) }}"
      when: item.name not in vm_list.list_vms
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Start VM
      virt:
        name: "{{ item.name }}"
        state: running
      when: item.name not in vm_list.list_vms
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"
