# Setup Kata dev environment on Fedora 32 or Ubuntu 20.04 VM
---
- name: Setup Kata Dev Environment on {{ ansible_distribution }}
  hosts: all
  vars:
    HOME: /home/{{ ansible_ssh_user }}
    X86_VENDOR: 'amd' # amd or intel
    KATA_CONTAINERS_REPOSITORY: "github.com/kata-containers/kata-containers"
    GOLANG_VERSION: 1.13.9
    GOLANG_ARCH: "{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}"
    InstallKataPackages: no # not implemented on Ubuntu
    UpdateAllPackages: no
    post_setup: |
        - Reboot the node

  pre_tasks:
    - name: Cleanup local known_hosts - hostname
      delegate_to: localhost
      connection: local
      lineinfile:
        regexp: "{{ ansible_fqdn }}"
        path: ~/.ssh/known_hosts
        state: absent

    - name: Cleanup local known_hosts - IP address
      delegate_to: localhost
      connection: local
      lineinfile:
        regexp: "{{ ansible_default_ipv4.address }}"
        path: ~/.ssh/known_hosts
        state: absent
  tasks:
    - name: Include distro specific vars
      include_vars: vars-{{ ansible_distribution }}.yaml
    - name: Install packages
      block:
        - name: Installing packages
          package:
            name: "{{ PACKAGES }}"
            state: latest
          tags:
            - install
        - name: Updating all system packages
          package:
            name: '*'
            state: latest
          when: UpdateAllPackages
          tags:
            - install
      become: yes

    - name: Create gopath directory
      file:
        path: "{{ HOME }}/gopath"
        state: directory

    - name: check current golang version
      command: bash -c "go version|sed -e 's/go version go//g'|cut -d' ' -f1"
      ignore_errors: yes
      register: current_go_version
      changed_when: false
 
    - debug: msg="current_go_version={{ current_go_version.stdout }}"
    - debug: msg="required_go_version={{ GOLANG_VERSION }}"
 
    - name: Go setup
      block:
        - name: Remove old installation of Go
          block:
            - name: Remove go package
              package:
                name: golang
                state: absent
            - name: Remove manually installed go
              file:
                path: /usr/local/go
                state: absent
          become: yes

        - name: download golang tar
          get_url:
            url: "https://storage.googleapis.com/golang/go{{ GOLANG_VERSION }}.linux-{{ GOLANG_ARCH }}.tar.gz"
            dest: "{{ HOME }}"

        - name: Extract Golang
          unarchive:
            src: "{{ HOME }}/go{{ GOLANG_VERSION }}.linux-{{ GOLANG_ARCH }}.tar.gz"
            dest: /usr/local
            remote_src: yes
          become: yes
      when: current_go_version.stdout == "" or (current_go_version.stdout is version( GOLANG_VERSION , '<', strict=True))

    - name: Rust Setup
      shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | /bin/bash -s -- -y
      args:
        executable: /bin/bash

    - name: Add musl rust target
      shell: "{{ HOME }}/.cargo/bin/rustup target add x86_64-unknown-linux-musl ; sudo ln -sf /usr/bin/g++ /bin/musl-g++"
      args:
        executable: /bin/bash
      when: ansible_architecture == 'x86_64'

    - name: Ensuring encoding is set to en_US.utf-8
      lineinfile:
        path: "{{ HOME }}/.bashrc"
        state: present
        line: 'export LANG=en_US.UTF8'
      tags:
        - alias

    - name: Set PATH/GOPATH
      blockinfile:
        path: "{{ HOME }}/.bashrc"
        state: present
        block: |
          export GOPATH="{{ HOME }}/gopath"
          export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
        marker: '# {mark} ANSIBLE MANAGED BLOCK - Golang Changes'
        insertafter: EOF
      tags:
        - path

    # Ref: https://stackoverflow.com/questions/39795873/ansible-lineinfile-modify-a-line
    - name: Update Grub to enable cgroupv1
      become: yes
      block:
        - name: Update default grub commandline
          lineinfile:
            state: present
            dest: /etc/default/grub
            backrefs: yes
            regexp: '^(GRUB_CMDLINE_LINUX=(?!.* systemd.unified_cgroup_hierarchy)\"[^\"]+)(\".*)'
            line: '\1 systemd.unified_cgroup_hierarchy=0\2'
        - name: update grub.cfg
          shell:
            cmd: "{{GRUB_MKCONFIG}} > {{GRUB_CONFIG}}"

    - name: Enable nested KVM on X86
      lineinfile:
        create: yes
        state: present
        dest: /etc/modprobe.d/kvm.conf
        line: 'options kvm_{{ X86_VENDOR }} nested=1'
      become: yes
      when: ansible_architecture == "x86_64"
 
    - name: Enable nested KVM on Power
      lineinfile: 
        state: present
        create: yes
        dest: /etc/modules-load.d/kvm.conf
        line: 'kvm_hv'
      become: yes
      when: ansible_architecture == "ppc64le"
   
    - name: Install Kata guest kernel and initird for quick start
      dnf: 
        name: "{{ KATA_PKGS }}"
        state: present
      become: yes
      when: ansible_distribution == "Fedora" and InstallKataPackages == "yes"

    - name: Pull kata-containers sources from Git
      shell: go get -d -u {{ KATA_CONTAINERS_REPOSITORY }} || true
      args:
        executable: /bin/bash

    - name: Setup completed
      debug: msg={{ post_setup.split('\n') }}
